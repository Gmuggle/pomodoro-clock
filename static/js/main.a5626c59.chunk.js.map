{"version":3,"sources":["App.js","serviceWorker.js","index.js","yisell_sound_2008030716560441118_88011.mp3"],"names":["DEFAULT_BREAK","DEFAULT_SESSION","DEFAULT_TIMER","label","length","BTN_STYLE","BreakSet","id","className","this","props","breakLength","type","onClick","decrease","increase","React","Component","SessionSet","sessionLength","Timer","timerLabel","timerLeft","startStop","reset","App","state","toString","concat","breakPart","sessionPart","breakCount","sessionCount","playOrStop","breakDecrease","bind","breakIncrease","sessionDecrease","sessionIncrease","startTimer","playBeep","alarmReady","setState","showText","clearInterval","timerID","myBeep","document","getElementById","pause","currentTime","console","log","setInterval","displayText","sessionMin","Math","floor","sessionSec","breakMin","breakSec","play","timerDisplay","slice","classList","add","remove","src","myMP3","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a5626c59.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport myMP3 from './yisell_sound_2008030716560441118_88011.mp3';\n//import { thisExpression } from '@babel/types';\n\nconst DEFAULT_BREAK = 5;\nconst DEFAULT_SESSION = 25;\nconst DEFAULT_TIMER = {label: \"session\", length: 25};\n\nconst BREAK_LAYOUT = \"col-xs-6 col-md-6\";\nconst SESSION_LAYOUT = \"col-xs-6 col-md-6\";\nconst TIMER_LAYOUT = \"col-xs-12 col-md-12\";\nconst APP_LAYOUT = \"row col-xs-12 col-md-12\";\nconst APP_CONTAINER_LAYOUT = \"row col-xs-10 col-xs-offset-1 col-md-6 col-md-offset-3\";\nconst H1_CONTAINER_LAYOUT = \"col-xs-12 col-md-12\";\nconst AUDIO_LAYOUT = \"col-xs-12 col-md-12\";\nconst BTN_STYLE = \"btn btn-default\";\n\nclass BreakSet extends React.Component {\n  render() {\n    return (\n      <div id=\"break-container\" className={BREAK_LAYOUT}>\n        <h2 id=\"break-label\">Break Length</h2>\n        <p id=\"break-length\">{this.props.breakLength}</p>\n        <button id=\"break-decrement\" className={BTN_STYLE} type=\"button\" onClick={this.props.decrease}>-</button>\n        <button id=\"break-increment\" className={BTN_STYLE} type=\"button\" onClick={this.props.increase}>+</button>\n      </div>\n    );\n  }\n}\n\nclass SessionSet extends React.Component {\n  render() {\n    return (\n      <div id=\"session-container\" className={SESSION_LAYOUT}>\n        <h2 id=\"session-label\">Session Length</h2>\n        <p id=\"session-length\">{this.props.sessionLength}</p>\n        <button id=\"session-decrement\" className={BTN_STYLE} type=\"button\" onClick={this.props.decrease}>-</button>\n        <button id=\"session-increment\" className={BTN_STYLE} type=\"button\" onClick={this.props.increase}>+</button>\n      </div>\n    );\n  }\n}\n\nclass Timer extends React.Component {\n  render() {\n    return (\n      <div id=\"timer-container\" className={TIMER_LAYOUT}>\n        <h2 id=\"timer-label\">{this.props.timerLabel}</h2>\n        <p id=\"time-left\">{this.props.timerLeft}</p>\n        <button id=\"start_stop\" className={BTN_STYLE} type=\"button\" onClick={this.props.startStop}>play/stop</button>\n        <button id=\"reset\" className={BTN_STYLE} type=\"button\" onClick={this.props.reset}>reset</button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerLabel: DEFAULT_TIMER.label,\n      timerLeft: DEFAULT_SESSION.toString().concat(\":00\"),\n      breakPart: DEFAULT_BREAK,\n      sessionPart: DEFAULT_SESSION,\n      breakCount: (DEFAULT_BREAK * 60),\n      sessionCount: (DEFAULT_SESSION * 60),\n      playOrStop: false\n    };\n    this.breakDecrease = this.breakDecrease.bind(this);\n    this.breakIncrease = this.breakIncrease.bind(this);\n    this.sessionDecrease = this.sessionDecrease.bind(this);\n    this.sessionIncrease = this.sessionIncrease.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.reset = this.reset.bind(this);\n    this.playBeep = this.playBeep.bind(this);\n    this.alarmReady = this.alarmReady.bind(this);\n  }\n\n\n  breakDecrease() {\n    if (this.state.playOrStop === false) {\n      if (this.state.breakPart > 1){\n        this.setState({\n          breakPart: this.state.breakPart - 1,\n          breakCount: this.state.breakCount - 60\n        });\n        if (this.state.timerLabel === \"break\"){\n          let showText = (this.state.breakPart  - 1 < 10) ? \"0\" + (this.state.breakPart - 1).toString() : (this.state.breakPart - 1).toString();\n          this.setState({\n            timerLeft: showText.concat(\":00\")\n          });\n        }\n      }\n    }\n  }\n\n  breakIncrease() {\n    if (this.state.playOrStop === false) {\n      if (this.state.breakPart < 60) {\n        this.setState({\n          breakPart: this.state.breakPart + 1,\n          breakCount: this.state.breakCount + 60\n        });\n        if (this.state.timerLabel === \"break\"){\n          let showText = (this.state.breakPart + 1 < 10) ? \"0\" + (this.state.breakPart + 1).toString() : (this.state.breakPart + 1).toString();\n          this.setState({\n            timerLeft: showText.concat(\":00\")\n          });\n        }\n      }\n    }\n  }\n\n  sessionDecrease() {\n    if (this.state.playOrStop === false) {\n      if (this.state.sessionPart > 1) {\n        this.setState({\n          sessionPart: this.state.sessionPart - 1,\n          sessionCount: this.state.sessionCount - 60\n        });\n        if (this.state.timerLabel === \"session\"){\n          let showText = (this.state.sessionPart - 1 < 10) ? \"0\" + (this.state.sessionPart - 1).toString() : (this.state.sessionPart - 1).toString();\n          this.setState({\n            timerLeft: showText.concat(\":00\")\n          });\n        }\n      }\n    }\n  }\n\n  sessionIncrease() {\n    if (this.state.playOrStop === false) {\n      if (this.state.sessionPart < 60) {\n        this.setState({\n          sessionPart: this.state.sessionPart + 1,\n          sessionCount: this.state.sessionCount + 60\n        });\n        if (this.state.timerLabel === \"session\"){\n          let showText = (this.state.sessionPart + 1 < 10) ? \"0\" + (this.state.sessionPart + 1).toString() : (this.state.sessionPart + 1).toString();\n          this.setState({\n            timerLeft: showText.concat(\":00\")\n          });\n        }\n      }\n    }\n  }\n\n  reset() {\n    clearInterval(this.timerID);\n    this.setState({\n      timerLabel: DEFAULT_TIMER.label,\n      timerLeft: DEFAULT_SESSION.toString().concat(\":00\"),\n      breakPart: DEFAULT_BREAK,\n      sessionPart: DEFAULT_SESSION,\n      breakCount: (DEFAULT_BREAK * 60),\n      sessionCount: (DEFAULT_SESSION * 60),\n      playOrStop: false\n    });\n    let myBeep = document.getElementById(\"beep\");\n    myBeep.pause();\n    myBeep.currentTime = 0;\n  }\n\n\n  startStop() {\n/*     let sessionTime = this.state.sessionPart * 60;\n    let breakTime = this.state.breakPart * 60;\n    let total = sessionTime + breakTime; */\n    \n    if (this.state.playOrStop === false){\n      this.setState({\n        playOrStop: true\n      });\n      \n      console.log(this.state.playOrStop);\n      this.timerID = setInterval(\n        () => this.startTimer(),\n        1000\n      );\n\n    }else {\n      this.setState({\n        playOrStop: false\n      });\n      console.log(this.state.playOrStop);\n      clearInterval(this.timerID);\n    }\n    \n  }\n\n  startTimer() {\n    //console.log(\"1\");\n    let displayText;\n    let minText;\n    let secText;\n    if (this.state.sessionCount > 0){\n\n      this.setState({\n        sessionCount: this.state.sessionCount - 1\n      });\n\n      let sessionMin = Math.floor(this.state.sessionCount / 60);\n      let sessionSec = this.state.sessionCount % 60;\n      minText = (sessionMin < 10) ? \"0\" + sessionMin : sessionMin;\n      secText = (sessionSec < 10) ? \"0\" + sessionSec : sessionSec;\n\n      displayText = minText + \":\" + secText;\n            \n      this.setState({\n        timerLeft: displayText,\n        timerLabel: \"session\"\n      });\n\n      this.alarmReady();\n      this.playBeep();\n\n    }else {\n      if (this.state.breakCount >= 0){\n  \n        let breakMin = Math.floor(this.state.breakCount / 60);\n        let breakSec = this.state.breakCount % 60;\n        minText = (breakMin < 10) ? \"0\" + breakMin : breakMin;\n        secText = (breakSec < 10) ? \"0\" + breakSec : breakSec;\n  \n        displayText = minText + \":\" + secText;\n              \n        this.setState({\n          timerLeft: displayText,\n          timerLabel: \"break\"\n        })\n\n        this.alarmReady();\n        this.playBeep();\n\n        this.setState({\n          breakCount: this.state.breakCount - 1\n        });\n\n      }else {\n        let showText = (this.state.sessionPart < 10) ? \"0\" + (this.state.sessionPart).toString() : (this.state.sessionPart).toString();\n        this.setState({\n          sessionCount: this.state.sessionPart * 60,\n          breakCount: this.state.breakPart * 60,\n          timerLabel: \"session\",\n          timerLeft: showText.concat(\":00\")\n        });\n        this.alarmReady();\n      }\n    }\n  }\n\n  playBeep() {\n    if (this.state.timerLeft === \"00:00\"){\n      let myBeep = document.getElementById(\"beep\");\n      myBeep.currentTime = 0;\n      myBeep.play();\n    }\n  }\n\n  alarmReady() {\n    let timerDisplay = document.getElementById(\"time-left\");\n    if (this.state.timerLeft.slice(0, 2) === \"00\"){\n      timerDisplay.classList.add(\"red-text\");\n    }else {\n      timerDisplay.classList.remove(\"red-text\");\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app-container\" className={\"App \" + APP_CONTAINER_LAYOUT}>\n        <h1 className={H1_CONTAINER_LAYOUT}>Pomodoro Clock</h1>\n        <audio className={AUDIO_LAYOUT} id=\"beep\" src={myMP3}></audio>\n        <div id=\"panel\" className={APP_LAYOUT}>\n          <BreakSet breakLength={this.state.breakPart} decrease={this.breakDecrease} increase={this.breakIncrease}/>\n          <SessionSet sessionLength={this.state.sessionPart} decrease={this.sessionDecrease} increase={this.sessionIncrease}/>\n          <Timer timerLabel={this.state.timerLabel} timerLeft={this.state.timerLeft} startStop={this.startStop} reset={this.reset}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/yisell_sound_2008030716560441118_88011.cf48bcdb.mp3\";"],"sourceRoot":""}